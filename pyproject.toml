[project]
name = "gobbler-mcp"
version = "0.1.0"
description = "MCP server for converting content (YouTube, web, documents, audio/video) to markdown with YAML frontmatter"
authors = [
    {name = "Dylan Isaac", email = "dylan@enablement.engineering"}
]
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}
keywords = [
    "mcp",
    "model-context-protocol",
    "markdown",
    "conversion",
    "transcription",
    "web-scraping",
    "youtube",
    "whisper",
    "claude",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Text Processing :: Markup :: Markdown",
]

dependencies = [
    "fastmcp>=0.2.0",
    "youtube-transcript-api>=0.6.3",
    "httpx>=0.27.0",
    "pyyaml>=6.0.1",
    "aiofiles>=24.0.0",
    "yt-dlp>=2025.9.26",
    "faster-whisper>=1.2.0",
    "redis>=6.4.0",
    "rq>=2.6.0",
    "beautifulsoup4>=4.12.0",
]

[project.urls]
Homepage = "https://github.com/Enablement-Engineering/gobbler"
Documentation = "https://github.com/Enablement-Engineering/gobbler#readme"
Repository = "https://github.com/Enablement-Engineering/gobbler"
Issues = "https://github.com/Enablement-Engineering/gobbler/issues"

[project.optional-dependencies]
dev = [
    "pytest>=8.0.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=5.0.0",
    "pytest-mock>=3.12.0",
    "pytest-benchmark>=4.0.0",
    "pytest-httpx>=0.30.0",
    "fakeredis>=2.21.0",
    "mypy>=1.10.0",
    "ruff>=0.4.0",
]

[project.scripts]
gobbler-mcp = "gobbler_mcp.__main__:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/gobbler_mcp"]

[tool.pytest.ini_options]
asyncio_mode = "auto"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "integration: marks tests as integration tests (deselect with '-m \"not integration\"')",
    "benchmark: marks tests as benchmark tests",
    "e2e: marks tests as end-to-end tests",
]
addopts = [
    "--strict-markers",
    "--tb=short",
    "--cov=src/gobbler_mcp",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html",
]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
strict = true

[tool.ruff]
line-length = 100
target-version = "py310"

[tool.ruff.lint]
select = ["E", "F", "I", "N", "W", "UP"]
ignore = []

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]

[tool.coverage.run]
source = ["src/gobbler_mcp"]
omit = [
    "*/tests/*",
    "*/fixtures/*",
    "*/__pycache__/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]
precision = 2
skip_covered = false
skip_empty = true
